//Постановка задачи:
//1.	Определить шаблон класса - контейнера.
//2.	Реализовать конструкторы, деструктор, операции ввода - вывода, операцию присваивания.
//3.	Перегрузить операции, указанные в варианте.
//4.	Инстанцировать шаблон для стандартных типов данных(int, float, double).
//5.	Написать тестирующую программу, иллюстрирующую выполнение операций для контейнера, содержащего элементы стандартных типов данных.
//6.	Реализовать пользовательский класс
//7.	Перегрузить для пользовательского класса операции ввода - вывода.
//8.	Перегрузить операции необходимые для выполнения операций контейнерного класса.
//9.	Инстанцировать шаблон для пользовательского класса.
//10.	Написать тестирующую программу, иллюстрирующую выполнение операций для контейнера, содержащего элементы пользовательского класса.
//


#include <iostream>
#include <string>
#include "Header.h"

using namespace std;

int main()
{
	setlocale(LC_ALL, "RUS");

	int choice;
tryAgain:
	cout << "Выберите тест:\n1)Тест шаблона класса-контейнера (множества)";
	cout << "\n2)Тест множества, содержащего элементы пользовательского класса Pair" << endl;
	cin >> choice;
	switch (choice){
	case 1: // Тест контейнера, содержащего элементы стандартных типов данных.
	{
		// Создаем множество с элементами типа int
		Set<int> set1;
		int d;
		cin >> set1; // Заполняем его (перегруженный оператор ввода)
		cout << "Ваше 1е множество:" << endl;
		cout << set1;
		set1.getsize(); // Определение размера множества
		cout << "Is element 3 in Set? " << set1.IsElmInSet(3) << endl; // Проверка принадлежности элемента "3" множеству
		cout << "Введите элемент, который хотите удалить: ";
		cin >> d;
		set1.del(d);
		cout << "Ваше 1е множество:" << endl;
		cout << set1;

		// Создаем множество с элементами типа double
		double arr1[3] = {1.33, 4.01, 0.1}, r;
		Set<double> set2(arr1, 3); // Создаем множество по заданному массиву типа double
		cout << "\nВаше 2e множество:" << endl;
		cout << set2;
		set2.getsize(); // Определение размера множества
		cout << "Is element 0.1 in Set? " << set2.IsElmInSet(0.1) << endl; // Проверка принадлежности элемента "0.1" множеству
		set2.del(0.1); // Удаление элемента "0.1"
		cout << "Is element 0.1 still in Set? " << set2.IsElmInSet(0.1) << endl; // Повторная проверка принадлежности элемента "0.1" множеству после удаления
		set2.add(3.33); // Добавим еще 2 элемента во множество
		cout << "Введите элемент, который хотите добавить: ";
		cin >> r;
		set2.add(r);
		cout << "Ваше 2e множество:" << endl;
		cout << set2;
		set2.getsize(); // Определение размера множества

		// Создаем множество с элементами типа string
		Set<string> set3;
		cout << "\n";
		cin >> set3; // Заполняем его (перегруженный оператор ввода)
		cout << "\nВаше 3е множество:" << endl;
		cout << set3;
		set3.getsize(); // Определение размера множества
		set3.IsEmpty(); // Проверка на пустоту
	}
	break;
	case 2: // Тест множества, содержащего элементы пользовательского класса Pair
	{
		int a;
		double b;
		cout << "Введите пару чисел (int и double): ";
		cin >> a >> b;
		Pair p1 = Pair(a, b); // Создали 1ю пару
		Pair p2;
		cin >> p2; // 2ю пару вводим с помощью перегруженного оператора ввода
		cout << "Введенные пары:\n" << p1 << endl << p2 << endl;; // Перегруженный оператор вывода

		Set<Pair> set1; // Создаем множество с элементами пользовательского класса
		set1.add(p1); // Добавляем в него две пары чисел
		set1.add(p2); 
		cout << "\nВаше 1е множество из этих двух пар:" << endl;
		cout << set1;

		Set<Pair> set2;
		cout << "\n";
		cin >> set2; // Заполняем 2е множество, вводя пары чисел (перегруженный оператор ввода)
		cout << "\nВаше 2е множество:" << endl;
		cout << set2;
		set2.getsize(); // Определение размера множества

		Pair arr[3] = {Pair(1, 0.05), Pair(11, 3.2), Pair(-7, 17.23)}; // Массив Pair
		Set<Pair> set3(arr, 3); // 3е множество из массива Pair
		cout << "\nВаше 3е множество:" << endl;
		cout << set3;
		cout << "Is element 11:3.2 in Set? " << set3.IsElmInSet(Pair(11, 3.2)) << endl; // Проверка принадлежности элемента "0.1" множеству
		set3.del(Pair(11, 3.2)); // Удаление элемента "0.1"
		cout << "Is element 11:3.2 still in Set? " << set3.IsElmInSet(Pair(11, 3.2)) << endl; // Повторная проверка принадлежности элемента "0.1" множеству после удаления
		set3.add(Pair(10, 0.1)); // Добавим элемент во множество
		cout << "Ваше 3e множество:" << endl;
		cout << set3;
		set3.getsize(); // Определение размера множества
	}
	break;
	default:{
		cout << "Wrong choice, try again." << endl;
		goto tryAgain;
	}
	}

	system("pause");
	return 0;
}